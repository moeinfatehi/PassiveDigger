package PassiveDigger;

import burp.BurpExtender;
import burp.IHttpRequestResponse;
import burp.IRequestInfo;
import burp.IResponseInfo;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/

/**
 *
 * @author "Moein Fatehi moein.fatehi@gmail.com"
 */
public class Passive_Headers extends javax.swing.JPanel  {
    private static Scanner sc;
    private static List<IHttpRequestResponse> headersReqRespList=new ArrayList<>();
    private static IHttpRequestResponse [] securityHeaderReqRespList= new IHttpRequestResponse [6];

    /**
     * Creates new form HeadersPanel
     */
    public Passive_Headers() {
        initComponents();
        initialize();
    }
    
    public static List<IHttpRequestResponse> getHeadersReqRespList(){
        return headersReqRespList;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        HeadersTabs = new javax.swing.JTabbedPane();
        HeadersPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        HeadersTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        exceptionField = new javax.swing.JTextField();
        exceptionRemoveButton = new javax.swing.JButton();
        removeRowButton = new javax.swing.JButton();
        tableExceptionButton = new javax.swing.JButton();
        SecurityHeadersPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        updateSecurityHeadersButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        DescriptionField = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        securityHeadersTable = new javax.swing.JTable();

        HeadersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Host", "Port", "Header", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        HeadersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                HeadersTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(HeadersTable);
        if (HeadersTable.getColumnModel().getColumnCount() > 0) {
            HeadersTable.getColumnModel().getColumn(0).setPreferredWidth(45);
            HeadersTable.getColumnModel().getColumn(0).setMaxWidth(100);
            HeadersTable.getColumnModel().getColumn(1).setPreferredWidth(120);
            HeadersTable.getColumnModel().getColumn(1).setMaxWidth(200);
            HeadersTable.getColumnModel().getColumn(2).setPreferredWidth(60);
            HeadersTable.getColumnModel().getColumn(2).setMaxWidth(85);
            HeadersTable.getColumnModel().getColumn(3).setPreferredWidth(200);
            HeadersTable.getColumnModel().getColumn(3).setMaxWidth(300);
        }

        jLabel3.setText("Exceptions");

        exceptionField.setText("Date,Content-Length,Set-Cookie,Content-Type,Connection,Last-Modified,CF-RAY,Expires,ETag,Location,Vary");
        exceptionField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exceptionFieldActionPerformed(evt);
            }
        });

        exceptionRemoveButton.setText("Remove");
        exceptionRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exceptionRemoveButtonActionPerformed(evt);
            }
        });

        removeRowButton.setText("Remove");
        removeRowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRowButtonActionPerformed(evt);
            }
        });

        tableExceptionButton.setText("Exception");
        tableExceptionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableExceptionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout HeadersPanelLayout = new javax.swing.GroupLayout(HeadersPanel);
        HeadersPanel.setLayout(HeadersPanelLayout);
        HeadersPanelLayout.setHorizontalGroup(
            HeadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HeadersPanelLayout.createSequentialGroup()
                .addGroup(HeadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HeadersPanelLayout.createSequentialGroup()
                        .addGroup(HeadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tableExceptionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(removeRowButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(HeadersPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)
                        .addGap(1, 1, 1)
                        .addComponent(exceptionField, javax.swing.GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exceptionRemoveButton)))
                .addContainerGap())
        );
        HeadersPanelLayout.setVerticalGroup(
            HeadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HeadersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(HeadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(exceptionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exceptionRemoveButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(HeadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HeadersPanelLayout.createSequentialGroup()
                        .addComponent(removeRowButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tableExceptionButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE))
                .addContainerGap())
        );

        HeadersTabs.addTab("Headers", HeadersPanel);

        jLabel6.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 150, 0));
        jLabel6.setText("Security Headers");

        updateSecurityHeadersButton.setText("Update From History");
        updateSecurityHeadersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateSecurityHeadersButtonActionPerformed(evt);
            }
        });

        DescriptionField.setColumns(20);
        DescriptionField.setRows(5);
        jScrollPane4.setViewportView(DescriptionField);

        jLabel7.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 150, 0));
        jLabel7.setText("Description");

        securityHeadersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"X-XSS-Protection", null, null},
                {"X-Frame-Options", null, null},
                {"Content-Security-Policy", null, null},
                {"X-Content-Type-Options", null, null},
                {"Referrer-Policy", null, null},
                {"Strict-Transport-Security", null, null}
            },
            new String [] {
                "Header", "Status", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        securityHeadersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                securityHeadersTableMouseClicked(evt);
            }
        });
        securityHeadersTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                securityHeadersTableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                securityHeadersTableKeyReleased(evt);
            }
        });
        jScrollPane6.setViewportView(securityHeadersTable);
        if (securityHeadersTable.getColumnModel().getColumnCount() > 0) {
            securityHeadersTable.getColumnModel().getColumn(0).setPreferredWidth(150);
            securityHeadersTable.getColumnModel().getColumn(0).setMaxWidth(180);
            securityHeadersTable.getColumnModel().getColumn(1).setPreferredWidth(60);
            securityHeadersTable.getColumnModel().getColumn(1).setMaxWidth(80);
            securityHeadersTable.getColumnModel().getColumn(2).setPreferredWidth(200);
        }

        javax.swing.GroupLayout SecurityHeadersPanelLayout = new javax.swing.GroupLayout(SecurityHeadersPanel);
        SecurityHeadersPanel.setLayout(SecurityHeadersPanelLayout);
        SecurityHeadersPanelLayout.setHorizontalGroup(
            SecurityHeadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SecurityHeadersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SecurityHeadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SecurityHeadersPanelLayout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 265, Short.MAX_VALUE)
                        .addComponent(updateSecurityHeadersButton))
                    .addComponent(jScrollPane4)
                    .addGroup(SecurityHeadersPanelLayout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane6))
                .addContainerGap())
        );
        SecurityHeadersPanelLayout.setVerticalGroup(
            SecurityHeadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SecurityHeadersPanelLayout.createSequentialGroup()
                .addGroup(SecurityHeadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(updateSecurityHeadersButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 179, Short.MAX_VALUE))
        );

        HeadersTabs.addTab("Security Headers", SecurityHeadersPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(HeadersTabs)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(HeadersTabs)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void securityHeadersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_securityHeadersTableMouseClicked
        if(evt.getClickCount()==2){
            int index=securityHeadersTable.getSelectedRow();
            if(securityHeaderReqRespList[index]!=null){
                reqRespForm.setReqResp(securityHeaderReqRespList[index]);
                reqRespForm jf=new reqRespForm();
                jf.setLocationRelativeTo(null);
                jf.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
                jf.tabs.setSelectedIndex(1);
                jf.setVisible(true);
            }
        }
        else{
            setDescription(getDescription((String) securityHeadersTable.getValueAt(securityHeadersTable.getSelectedRow(), 0)));
        }
    }//GEN-LAST:event_securityHeadersTableMouseClicked

    private void updateSecurityHeadersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateSecurityHeadersButtonActionPerformed
        for (int i = 0; i < securityHeadersTable.getRowCount(); i++) {
            if(!(boolean)securityHeadersTable.getValueAt(i, 1)){
                for (int j = 0; j < HeadersTable.getRowCount(); j++) {
                    if(HeadersTable.getValueAt(j, 1).equals(securityHeadersTable.getValueAt(i, 0))){
                        DefaultTableModel model=(DefaultTableModel)securityHeadersTable.getModel();
                        model.setValueAt(true, i, 1);
                        model.setValueAt(HeadersTable.getValueAt(j, 2), i, 2);
                        securityHeaderReqRespList[i]=headersReqRespList.get(j);
                        break;
                    }
                }
            }
        }
    }//GEN-LAST:event_updateSecurityHeadersButtonActionPerformed

    private void tableExceptionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableExceptionButtonActionPerformed
        int[]rows=HeadersTable.getSelectedRows();
        for(int i=rows.length-1;i>=0;i--){
            String parameter=HeadersTable.getValueAt(rows[i], 3).toString();
            addToExceptions(parameter);
        }
        removeExceptions();
    }//GEN-LAST:event_tableExceptionButtonActionPerformed

    private void removeRowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRowButtonActionPerformed
        int[]rows=HeadersTable.getSelectedRows();
        for(int i=rows.length-1;i>=0;i--){
            int thisInd=HeadersTable.convertRowIndexToModel(rows[i]);  //to delete correctly in a sorted table
            removeHeadersTableRow(thisInd);
        }
    }//GEN-LAST:event_removeRowButtonActionPerformed

    private void exceptionRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exceptionRemoveButtonActionPerformed
        removeExceptions();
    }//GEN-LAST:event_exceptionRemoveButtonActionPerformed

    private void exceptionFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exceptionFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_exceptionFieldActionPerformed

    private void HeadersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HeadersTableMouseClicked
        if(evt.getClickCount()==2){
            int ind=HeadersTable.getSelectedRow();
            int index=(int)HeadersTable.getValueAt(ind, 0)-1;
            BurpExtender.output.println("table size: "+HeadersTable.getRowCount());
            BurpExtender.output.println("list size: "+headersReqRespList.size());
            BurpExtender.output.println("Opening: "+index);
            if(headersReqRespList.get(index)!=null){
                reqRespForm.setReqResp(headersReqRespList.get(index));
                reqRespForm jf=new reqRespForm();
                jf.setLocationRelativeTo(null);
                jf.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
                jf.tabs.setSelectedIndex(1);
                jf.setVisible(true);
            }
        }
    }//GEN-LAST:event_HeadersTableMouseClicked

    private void securityHeadersTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_securityHeadersTableKeyPressed
    }//GEN-LAST:event_securityHeadersTableKeyPressed

    private void securityHeadersTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_securityHeadersTableKeyReleased
        setDescription(getDescription((String) securityHeadersTable.getValueAt(securityHeadersTable.getSelectedRow(), 0)));

    }//GEN-LAST:event_securityHeadersTableKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTextArea DescriptionField;
    private javax.swing.JPanel HeadersPanel;
    public static javax.swing.JTable HeadersTable;
    private javax.swing.JTabbedPane HeadersTabs;
    private javax.swing.JPanel SecurityHeadersPanel;
    public static javax.swing.JTextField exceptionField;
    private javax.swing.JButton exceptionRemoveButton;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JButton removeRowButton;
    public static javax.swing.JTable securityHeadersTable;
    private javax.swing.JButton tableExceptionButton;
    private javax.swing.JButton updateSecurityHeadersButton;
    // End of variables declaration//GEN-END:variables
    
    private static String getDescription(String header){
        switch(header){
            case "X-XSS-Protection" :
                return "Sets the configuration for the cross-site scripting filters built into most browsers.";
            case "X-Frame-Options" :
                return "Tells the browser whether you want to allow your site to be framed or not.";
            case "Content-Security-Policy" :
                return "Is an effective measure to protect your site from XSS attacks.";
            case "X-Content-Type-Options" :
                return "Stops a browser from trying to MIME-sniff the content type and forces it to stick with the declared content-type.";
            case "Referrer-Policy" :
                return "Allows a site to control how much information the browser includes with navigations away from a document and should be set by all sites.";
            case "Strict-Transport-Security" :
                return "Strengthens your implementation of TLS by getting the User Agent to enforce the use of HTTPS.";
            default : // Optional
        }
        return null;
    }
    
    private void setDescription(String desc){
        DescriptionField.setText(desc);
    }
    
    public static void removeHeadersTableRow(int i) {
        DefaultTableModel histModel=(DefaultTableModel)HeadersTable.getModel();
        int thisInd=HeadersTable.convertRowIndexToModel(i);
        histModel.removeRow(thisInd);
        headersReqRespList.remove(thisInd);
        Functions.updateRowNumbers(HeadersTable);
        updateHeadersTabTitle();
    }
    
    public static void addToHeadersTable(IHttpRequestResponse reqResp) {
        IResponseInfo respInfo=BurpExtender.callbacks.getHelpers().analyzeResponse(reqResp.getResponse());
        DefaultTableModel headersModel=(DefaultTableModel)HeadersTable.getModel();
        for (String header : respInfo.getHeaders()) {
            if(headerIsValid(header) && HeaderIsUnique(header,reqResp)){
                Object[] rowData=new Object[]{headersModel.getRowCount()+1,reqResp.getHttpService().getHost(),reqResp.getHttpService().getPort(),getHeaderParameter(header),getHeaderValue(header)};
                headersModel.addRow(rowData);
                headersReqRespList.add(reqResp);
                updateHeadersTabTitle();
            }
        }
    }
    
    private static boolean HeaderIsUnique(String header, IHttpRequestResponse reqResp) {
        String h=getHeaderParameter(header);
        for (int i=0;i<HeadersTable.getRowCount();i++) {
            if(HeadersTable.getValueAt(i, 3).equals(h)){
                String v=getHeaderValue(header);
                if(HeadersTable.getValueAt(i, 4).equals(v)){
                    if(headersReqRespList.get(i).getHttpService().getHost().equals(reqResp.getHttpService().getHost())){
                        if(headersReqRespList.get(i).getHttpService().getPort()==reqResp.getHttpService().getPort()){
                            return false;
                        }
                    }
                }
            }
        }
        return true;
    }
    
    private static boolean headerIsValid(String header) {
        if(!header.contains(":")){
            return false;
        }
        sc=new Scanner(exceptionField.getText());
        sc.useDelimiter(",");
        while (sc.hasNext()){
            String h=sc.next();
            if (getHeaderParameter(header).equals(h)){
                return false;
            }
        }
        return true;
    }
    
    private static String getHeaderParameter(String header){
        try {
            return header.substring(0, header.indexOf(":"));
        } catch (Exception e) {
            return null;
        }
    }
    
    private static String getHeaderValue(String header){
        try {
            return header.substring(header.indexOf(":")+2, header.length());
        } catch (Exception e) {
            return null;
        }
    }
    
    public boolean addToExceptions(String parameter){
        if(exceptionField.getText().length()>0){
            sc=new Scanner(exceptionField.getText());
            sc.useDelimiter(",");
            while (sc.hasNext()){
                if(sc.next().equals(parameter)){
                    return false;
                }
            }
            exceptionField.setText(exceptionField.getText()+","+parameter);
        }
        else{
            exceptionField.setText(parameter);
        }
        return true;
    }
    
    private void initialize() {
        DefaultTableModel secHeadersModel=(DefaultTableModel)securityHeadersTable.getModel();
        //update security headers contents
        for (int i = 0; i < securityHeadersTable.getRowCount(); i++) {
            securityHeadersTable.setValueAt(false, i, 1);
            securityHeadersTable.setValueAt("", i, 2);
        }
        headersReqRespList=new ArrayList<>();
        securityHeaderReqRespList= new IHttpRequestResponse [6];
        
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(HeadersTable.getModel());
        HeadersTable.setRowSorter(sorter);
    }
    
    private static void updateBaseReqRespTable(IHttpRequestResponse reqResp) {
        DefaultTableModel model=(DefaultTableModel)Passive_optionsPanel.baseReqRespTable.getModel();
        String host=reqResp.getHttpService().getHost();
        int port=reqResp.getHttpService().getPort();
        IRequestInfo reqInfo=BurpExtender.callbacks.getHelpers().analyzeRequest(reqResp);
        IResponseInfo respInfo=BurpExtender.callbacks.getHelpers().analyzeResponse(reqResp.getResponse());
        String path=reqInfo.getUrl().getPath();
        String method=reqInfo.getMethod();
        int status=respInfo.getStatusCode();
        int length=reqResp.getResponse().length-respInfo.getBodyOffset();
        Object rowData[]=new Object[]{host,port,path,method,status,length};
        if(model.getRowCount()>0){
            model.removeRow(0);
        }
        model.addRow(rowData);
    }

    private void removeExceptions() {
        sc=new Scanner(exceptionField.getText());
        sc.useDelimiter(",");
        while (sc.hasNext()){
            String h=sc.next();
            for(int i=HeadersTable.getRowCount()-1;i>=0;i--){
                if(HeadersTable.getValueAt(i, 3).equals(h)){
                    removeHeadersTableRow(i);
                }
            }
        }
    }

    private static void updateHeadersTabTitle() {
        PassivePanel.PassiveTabs.setTitleAt(PassivePanel.headers_index,"Headers ("+headersReqRespList.size()+")");
    }
    
}
