package PassiveDigger;


import burp.BurpExtender;
import burp.IHttpRequestResponse;
import burp.IRequestInfo;
import burp.IResponseInfo;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/

/**
 *
 * @author "Moein Fatehi moein.fatehi@gmail.com"
 */
public class Passive_optionsPanel extends javax.swing.JPanel {
    private static String extension_name="Options";
    private static boolean updateRequired=false;
    private static List<IHttpRequestResponse> baseReqRespList=new ArrayList<>();

    private static boolean targetIsUnique(IHttpRequestResponse reqResp) {
        BurpExtender.output.println("Target size: "+baseReqRespList.size()+" => "+printTargets());
        for (IHttpRequestResponse rr : baseReqRespList) {
            BurpExtender.output.println("**Testing if "+rr.getHttpService().getHost()+":"+rr.getHttpService().getPort()+" Equals to "+reqResp.getHttpService().getHost()+":"+reqResp.getHttpService().getPort());
            if(reqResp.getHttpService().getHost().equals(rr.getHttpService().getHost())){
                if(reqResp.getHttpService().getPort()==rr.getHttpService().getPort()){
                    return false;
                }
            }
        }
        return true;
    }
    
    private static String printTargets() {
        String tar="[";
        for (IHttpRequestResponse rr : baseReqRespList) {
            tar=tar+rr.getHttpService().getHost()+":"+rr.getHttpService().getPort()+",";
        }
        tar+="]";
        return tar;
    }
    
    /**
     * Creates new form HeadersPanel
     */
    public Passive_optionsPanel() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane18 = new javax.swing.JScrollPane();
        baseReqRespTable = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        options_removeButton = new javax.swing.JButton();
        options_clearButton = new javax.swing.JButton();
        options_UpdateButton = new javax.swing.JButton();
        options_UpdateLabel = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        options_request_table = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        options_response_table = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        baseReqRespTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Host", "Port"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        baseReqRespTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                baseReqRespTableMouseClicked(evt);
            }
        });
        jScrollPane18.setViewportView(baseReqRespTable);
        if (baseReqRespTable.getColumnModel().getColumnCount() > 0) {
            baseReqRespTable.getColumnModel().getColumn(0).setPreferredWidth(45);
            baseReqRespTable.getColumnModel().getColumn(0).setMaxWidth(55);
            baseReqRespTable.getColumnModel().getColumn(1).setPreferredWidth(150);
            baseReqRespTable.getColumnModel().getColumn(1).setMaxWidth(400);
            baseReqRespTable.getColumnModel().getColumn(2).setPreferredWidth(60);
            baseReqRespTable.getColumnModel().getColumn(2).setMaxWidth(80);
        }

        jLabel9.setFont(new java.awt.Font("Ubuntu", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 147, 0));
        jLabel9.setText("Targets");

        jLabel2.setText("(Double click for details)");

        options_removeButton.setText("Remove");
        options_removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                options_removeButtonActionPerformed(evt);
            }
        });

        options_clearButton.setText("Clear");
        options_clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                options_clearButtonActionPerformed(evt);
            }
        });

        options_UpdateButton.setText("Update Other Tabs");
        options_UpdateButton.setEnabled(false);
        options_UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                options_UpdateButtonActionPerformed(evt);
            }
        });

        options_request_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Boolean(true), "Req_01", "Find file upload functionalities"},
                { new Boolean(true), "Req_02", "Find serialized data in request"},
                { new Boolean(true), "Req_03", "Find base64-Encoded data in request"}
            },
            new String [] {
                "Enabled", "Code", "Title"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(options_request_table);
        if (options_request_table.getColumnModel().getColumnCount() > 0) {
            options_request_table.getColumnModel().getColumn(0).setPreferredWidth(100);
            options_request_table.getColumnModel().getColumn(0).setMaxWidth(100);
            options_request_table.getColumnModel().getColumn(1).setPreferredWidth(100);
            options_request_table.getColumnModel().getColumn(1).setMaxWidth(100);
        }

        jTabbedPane1.addTab("Request", jScrollPane1);

        options_response_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Boolean(true), "Resp_01", "Find SQL errors in resposne for SQL injection"},
                { new Boolean(true), "Resp_02", "Find Reflected params (Possible XSS or HTML injection)"},
                { new Boolean(true), "Resp_03", "Find possible LFI vulnerabilities"},
                { new Boolean(true), "Resp_04", "Find sensitive files"},
                { new Boolean(true), "Resp_05", "Fingerprint web server/application"},
                { new Boolean(true), "Resp_06", "Find directory indexing/browsing"},
                { new Boolean(true), "Resp_07", "Find possible Execution After Redirection (EAR)"},
                { new Boolean(true), "Resp_08", "Find sensitive data in errors"},
                { new Boolean(true), "Resp_09", "Find misconfiguration in Cookie flags"},
                { new Boolean(false), "Resp_10", "Find Base64-encoded  data in response"},
                { new Boolean(true), "Resp_11", "Extract email addresses"},
                { new Boolean(false), "Resp_12", "Extract phone numbers"}
            },
            new String [] {
                "Enabled", "Code", "Title"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(options_response_table);
        if (options_response_table.getColumnModel().getColumnCount() > 0) {
            options_response_table.getColumnModel().getColumn(0).setPreferredWidth(100);
            options_response_table.getColumnModel().getColumn(0).setMaxWidth(100);
            options_response_table.getColumnModel().getColumn(1).setPreferredWidth(100);
            options_response_table.getColumnModel().getColumn(1).setMaxWidth(100);
        }

        jTabbedPane1.addTab("Response", jScrollPane2);

        jLabel10.setFont(new java.awt.Font("Ubuntu", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 147, 0));
        jLabel10.setText("Analyzer Configuration");

        jButton1.setText("Update Analyzer Tab");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTabbedPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(options_UpdateButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(options_UpdateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(options_removeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(options_clearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 117, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(options_removeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(options_clearButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(options_UpdateButton)
                    .addComponent(options_UpdateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void baseReqRespTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_baseReqRespTableMouseClicked
        if(evt.getClickCount()==2){
            try {
                int ind=baseReqRespTable.getSelectedRow();
                reqRespForm.setReqResp(getBaseReqRespList().get(ind));
                reqRespForm rrf = new reqRespForm();
                rrf.setLocationRelativeTo(null);
                rrf.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
                rrf.setVisible(true);
            } catch (Exception e) {
                BurpExtender.output.println("*******"+e.toString());
            }
        }
    }//GEN-LAST:event_baseReqRespTableMouseClicked

    private void options_clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_options_clearButtonActionPerformed
        DefaultTableModel baseReqRespModel=(DefaultTableModel)baseReqRespTable.getModel();
        for (int i = 0; i < baseReqRespModel.getRowCount(); i++) {
            removeRowFromBaseReqRespTable(i);
        }
    }//GEN-LAST:event_options_clearButtonActionPerformed

    private void options_removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_options_removeButtonActionPerformed
        int[]rows=baseReqRespTable.getSelectedRows();
        BurpExtender.output.println(rows.length);
        for(int i=rows.length-1;i>=0;i--){
            int thisInd=baseReqRespTable.convertRowIndexToModel(rows[i]);  //to delete correctly in a sorted table
            removeRowFromBaseReqRespTable(thisInd);
        }
    }//GEN-LAST:event_options_removeButtonActionPerformed

    private void options_UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_options_UpdateButtonActionPerformed
        //Remove Analyser extra datas
        for (int i = PassiveAnalyzer.vulnerabilityList.size()-1; i>=0;i--) {
            if(!PassiveAnalyzer.requestIsInScope(PassiveAnalyzer.vulnerabilityList.get(i).reqResp)){
                PassiveAnalyzer.removeAnalyzerTableRow(i);
            }
        }
        
        //Remove Headers extra datas
        for (int i = Passive_Headers.getHeadersReqRespList().size()-1; i>=0;i--) {
            if(!PassiveAnalyzer.requestIsInScope(Passive_Headers.getHeadersReqRespList().get(i))){
                Passive_Headers.removeHeadersTableRow(i);
            }
        }
        options_UpdateButton.setEnabled(false);
        options_UpdateLabel.setForeground(new Color(43, 112, 61));
        options_UpdateLabel.setText("Updated.");
    }//GEN-LAST:event_options_UpdateButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        List<String> codeslist=getDisabledRulesList();
        RemoveFromAnalyzerBasedOnCodeList(codeslist);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JTable baseReqRespTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton options_UpdateButton;
    private javax.swing.JLabel options_UpdateLabel;
    private javax.swing.JButton options_clearButton;
    private javax.swing.JButton options_removeButton;
    public static javax.swing.JTable options_request_table;
    public static javax.swing.JTable options_response_table;
    // End of variables declaration//GEN-END:variables
    
    
    public static List<IHttpRequestResponse> getBaseReqRespList(){
        return baseReqRespList;
    }
    public static void AddToBaseReqResp(IHttpRequestResponse reqResp){
        BurpExtender.output.println("Adding "+reqResp.getHttpService().getHost()+":"+reqResp.getHttpService().getPort());
        try {
            if(targetIsUnique(reqResp)){
                BurpExtender.output.println("   "+reqResp.getHttpService().getHost()+":"+reqResp.getHttpService().getPort()+" is unique => Added");
                baseReqRespList.add(reqResp);
                updateBaseReqRespTable(reqResp);
                Passive_Headers.addToHeadersTable(reqResp);
                mainPanel.firstLevelTabs.setSelectedIndex(mainPanel.passive_index);
                updateOptionsTabTitle();
                BurpExtender.output.println("New Target size: "+baseReqRespList.size()+" => "+printTargets());
                BurpExtender.output.println("##########");
            }
            else{
                BurpExtender.output.println("   "+reqResp.getHttpService().getHost()+":"+reqResp.getHttpService().getPort()+" is Repetetive => Not Added!"+" => "+printTargets());
                BurpExtender.output.println("##########");
                
            }
        } catch (Exception e) {
            BurpExtender.output.print("AddToBaseReqResp Exception");
        }
    }
    
    private static void updateBaseReqRespTable(IHttpRequestResponse reqResp) {
        DefaultTableModel model=(DefaultTableModel)baseReqRespTable.getModel();
        String host=reqResp.getHttpService().getHost();
        int port=reqResp.getHttpService().getPort();
        IRequestInfo reqInfo=BurpExtender.callbacks.getHelpers().analyzeRequest(reqResp);
        IResponseInfo respInfo=BurpExtender.callbacks.getHelpers().analyzeResponse(reqResp.getResponse());
        String path=reqInfo.getUrl().getPath();
        String method=reqInfo.getMethod();
        int status=respInfo.getStatusCode();
        int length=reqResp.getResponse().length-respInfo.getBodyOffset();
        Object rowData[]=new Object[]{model.getRowCount()+1,host,port};
        model.addRow(rowData);
    }
    
    public static boolean targetIsLoaded(){
        if(baseReqRespTable.getRowCount()>0){
            return true;
        }
        return false;
//        if(HostField.getText().length()>0&&PortField.getText().length()>0){
//            return true;
//        }
//        return false;
    }
    
    
    private static void updateOptionsTabTitle() {
        PassivePanel.PassiveTabs.setTitleAt(PassivePanel.options_index,"Targets ("+baseReqRespList.size()+")");
    }

    private void removeRowFromBaseReqRespTable(int thisInd) {
        DefaultTableModel baseReqRespModel=(DefaultTableModel)baseReqRespTable.getModel();
        baseReqRespModel.removeRow(thisInd);
        baseReqRespList.remove(thisInd);
        updateOptionsTabTitle();
        Functions.updateRowNumbers(baseReqRespTable);
        enableUpdateButton();
    }

    private void enableUpdateButton() {
        updateRequired=true;
        options_UpdateButton.setEnabled(true);
        options_UpdateLabel.setForeground(new Color(199, 124, 20));
        options_UpdateLabel.setText("Some datas on other tabs are based on removed targets. Click Here to remove them.");
    }

    private List<String> getDisabledRulesList() {
        List<String> codesList=new ArrayList<String>();
        // Update Request Rules
        for (int i = 0; i < options_request_table.getRowCount(); i++) {
            if (!PassiveAnalyzer.getRuleStatus(options_response_table, i)){   // If it is disabled
                codesList.add(options_request_table.getValueAt(i, 1).toString());
            }
        }
        
        // Update Response Rules
        for (int i = 0; i < options_response_table.getRowCount(); i++) {
            if (!PassiveAnalyzer.getRuleStatus(options_response_table, i)){   // If it is disabled
                codesList.add(options_response_table.getValueAt(i, 1).toString());
            }
        }
        return codesList;
    }

    private void RemoveFromAnalyzerBasedOnCodeList(List<String> codeslist) {
        for (int i = PassiveAnalyzer.AnalyzerTable.getRowCount()-1; i >=0; i--) {
            int thisInd=PassiveAnalyzer.AnalyzerTable.convertRowIndexToModel(i);
            for (String code : codeslist) {
                if(code.equals(PassiveAnalyzer.AnalyzerTable.getValueAt(i, 5))){
                    BurpExtender.output.println("i: "+i+", thisInd: "+thisInd+"=>"+PassiveAnalyzer.AnalyzerTable.getValueAt(i, 5));
                    PassiveAnalyzer.removeAnalyzerTableRow(thisInd);
                    break;
                }
            }
        }
    }
}